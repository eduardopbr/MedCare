// <auto-generated />
using System;
using MedCare.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedCare.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240423165801_ConsultaTable")]
    partial class ConsultaTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedCare.Domain.Entities.Consulta", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("datanasc")
                        .HasColumnType("date");

                    b.Property<string>("diagnostico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("especialidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("examesrelacionados")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("funcionarioid")
                        .HasColumnType("integer");

                    b.Property<int>("pacienteid")
                        .HasColumnType("integer");

                    b.Property<int>("registro")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("consulta");
                });

            modelBuilder.Entity("MedCare.Domain.Entities.Exame", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("data")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("hora")
                        .HasColumnType("time without time zone");

                    b.Property<int>("pacienteid")
                        .HasColumnType("integer");

                    b.Property<string>("resultado")
                        .HasColumnType("text");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("id");

                    b.HasIndex("pacienteid");

                    b.ToTable("exame");
                });

            modelBuilder.Entity("MedCare.Domain.Entities.Funcionario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("cargo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("celular")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("cpf")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("datanascimento")
                        .HasColumnType("date");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("endereco")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("especialidade")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("registr_profissional")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("sexo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("id");

                    b.HasIndex("cpf")
                        .IsUnique();

                    b.ToTable("funcionario");
                });

            modelBuilder.Entity("MedCare.Domain.Entities.Paciente", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("celular")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("cpf")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("datanascimento")
                        .HasColumnType("date");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("endereco")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("sexo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("id");

                    b.HasIndex("cpf")
                        .IsUnique();

                    b.ToTable("paciente");
                });

            modelBuilder.Entity("MedCare.Domain.Entities.Procedimento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("data")
                        .HasColumnType("date");

                    b.Property<int>("funcionarioid")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("hora")
                        .HasColumnType("time without time zone");

                    b.Property<int>("pacienteid")
                        .HasColumnType("integer");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("id");

                    b.HasIndex("funcionarioid");

                    b.HasIndex("pacienteid");

                    b.ToTable("procedimento");
                });

            modelBuilder.Entity("MedCare.Domain.Entities.Exame", b =>
                {
                    b.HasOne("MedCare.Domain.Entities.Paciente", "paciente")
                        .WithMany("Exames")
                        .HasForeignKey("pacienteid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("paciente");
                });

            modelBuilder.Entity("MedCare.Domain.Entities.Procedimento", b =>
                {
                    b.HasOne("MedCare.Domain.Entities.Funcionario", "funcionario")
                        .WithMany("Procedimentos")
                        .HasForeignKey("funcionarioid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedCare.Domain.Entities.Paciente", "paciente")
                        .WithMany("Procedimentos")
                        .HasForeignKey("pacienteid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("funcionario");

                    b.Navigation("paciente");
                });

            modelBuilder.Entity("MedCare.Domain.Entities.Funcionario", b =>
                {
                    b.Navigation("Procedimentos");
                });

            modelBuilder.Entity("MedCare.Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Exames");

                    b.Navigation("Procedimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
